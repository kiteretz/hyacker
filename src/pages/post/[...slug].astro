---
// .mdのfrontmatterを増やす場合は、content.config.tsも更新する
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import PostNavigation from '../../components/PostNavigation.astro';

export async function getStaticPaths() {
  const posts = await getCollection('posts');

  // 投稿を日付順にソート（新しい順）
  const sortedPosts = posts.sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());
  // 古い順にソート
  // const sortedPosts = posts.sort((a, b) => new Date(a.data.pubDate).getTime() - new Date(b.data.pubDate).getTime());
  // タイトル順にソート
  // const sortedPosts = posts.sort((a, b) => a.data.title.localeCompare(b.data.title));
  // 更新日順にソート
  // const sortedPosts = posts.sort((a, b) => new Date(b.data.upDate).getTime() - new Date(a.data.upDate).getTime());

  return sortedPosts.map((entry: any, index: number) => {
    // 前後の投稿を取得
    const prev = index > 0 ? sortedPosts[index - 1] : null;
    const next = index < sortedPosts.length - 1 ? sortedPosts[index + 1] : null;

    return {
      params: { slug: entry.slug },
      props: { entry, prev, next },
    };
  });
}

type Props = {
  entry: CollectionEntry<'posts'>;
  prev: CollectionEntry<'posts'> | null;
  next: CollectionEntry<'posts'> | null;
};
const { entry, prev, next } = Astro.props as Props;

// render結果を分割代入で取得
const { Content, headings = [] } = await entry.render();

// データを分割代入で取得（デフォルト値設定）
const { title, description, upDate, pubDate, author, image, tags = [] } = entry.data;

// 日付フォーマット用のヘルパー関数
const formatDate = (date: Date) => date.toISOString().slice(0, 10);
---

<Layout title={title} className="post">
  <article>
    <h2>{title}</h2>
    <p>{description}</p>
    <time datetime={upDate.toISOString()}>{formatDate(upDate)}</time>
    <time datetime={pubDate.toISOString()}>{formatDate(pubDate)}</time>
    <p>{author}</p>
    {image && <img src={image?.url} alt={image?.alt} />}
    <ul>
      {
        (tags ?? []).map((tag: string | undefined) => {
          return (
            <li>
              <a href={`/tags/${tag}`}>{tag}</a>
            </li>
          );
        })
      }
    </ul>
    <div>
      <TableOfContents headings={headings} />
    </div>
    <div class="content-wrapper">
      <Content />
    </div>
    <PostNavigation prev={prev} next={next} />
  </article>
</Layout>
